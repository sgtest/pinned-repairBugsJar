#! /bin/sh
### BEGIN INIT INFO
# Provides:         accumulo-tracer
# Required-Start:   $network $local_fs zookeeper-server
# Required-Stop:    $network $local_fs
# Default-Start:    2 3 4 5
# Default-Stop:     0 1 6
# Short-Description: accumulo tracer 
# Description:      The accumulo tracer provides a mechanism for tracing accumulo calls
### END INIT INFO

# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Do NOT "set -e"
install -d -m 0775 -o root -g accumulo /var/run/accumulo

# PATH should only include /usr/* if it runs after the mountnfs.sh script
PATH=/sbin:/usr/sbin:/bin:/usr/bin:/usr/lib/accumulo/bin
DESC="Accumulo Tracer"
NAME=accumulo-tracer
ACCUMULO_PROC=tracer
DAEMON=/usr/lib/accumulo/bin/start-server.sh
IP=`ifconfig | grep inet[^6] | awk '{print $2}' | sed 's/addr://' | grep -v 0.0.0.0 | grep -v 127.0.0.1 | head -n 1`
DAEMON_ARGS="$IP tracer"
PIDFILE=/var/run/$NAME.pid
SCRIPTNAME=/etc/init.d/$NAME

# Read configuration variable file if it is present
[ -r /etc/default/accumulo ] && . /etc/default/accumulo

# Load the VERBOSE setting and other rcS variables
. /lib/init/vars.sh

# Define LSB log_* functions.
# Depend on lsb-base (>= 3.2-14) to ensure that this file is present
# and status_of_proc is working.
. /lib/lsb/init-functions

#
# Function that starts the daemon/service
#
do_start()
{
    TARGET_USER_NAME="ACCUMULO_TRACER_USER"
    TARGET_USER=$(eval "echo \$$TARGET_USER_NAME")
	# Return
	#  0 if daemon has been started
	#  1 if daemon was already running
	#  2 if daemon could not be started
	
	if [ "`jps -m | grep $ACCUMULO_PROC`" ] ; then return 1; fi
	
	su -s /bin/sh $TARGET_USER -c "$DAEMON $DAEMON_ARGS > /dev/null || return 1"

	if [ "`jps -m | grep $ACCUMULO_PROC`" ] ; then return 0; fi
	return 2
	# Add code here, if necessary, that waits for the process to be ready
	# to handle requests from services started subsequently which depend
	# on this one.  As a last resort, sleep for some time.
}

#
# Function that stops the daemon/service
#
do_stop()
{
	# Return
	#  0 if daemon has been stopped
	#  1 if daemon was already stopped
	#  2 if daemon could not be stopped
	#  other if a failure occurred

	if [ ! "`jps -m | grep $ACCUMULO_PROC`" ] ; then return 1; fi

	jps -m | grep $ACCUMULO_PROC | awk '{print $1}' | xargs kill -9

	if [ "`jps -m | grep $ACCUMULO_PROC`" ] ; then return 2; fi

	return 0;
}

case "$1" in
  start)
	[ "$VERBOSE" != no ] && log_daemon_msg "Starting $DESC" "$NAME"
	do_start
	case "$?" in
		0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
		2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
	esac
	;;
  stop)
	[ "$VERBOSE" != no ] && log_daemon_msg "Stopping $DESC" "$NAME"
	do_stop
	case "$?" in
		0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
		2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
	esac
	;;
  status)
      status_of_proc "$DAEMON" "$NAME" && exit 0 || exit $?
      ;;
  #reload|force-reload)
	#
	# If do_reload() is not implemented then leave this commented out
	# and leave 'force-reload' as an alias for 'restart'.
	#
	#log_daemon_msg "Reloading $DESC" "$NAME"
	#do_reload
	#log_end_msg $?
	#;;
  restart|force-reload)
	#
	# If the "reload" option is implemented then remove the
	# 'force-reload' alias
	#
	log_daemon_msg "Restarting $DESC" "$NAME"
	do_stop
	case "$?" in
	  0|1)
		do_start
		case "$?" in
			0) log_end_msg 0 ;;
			1) log_end_msg 1 ;; # Old process is still running
			*) log_end_msg 1 ;; # Failed to start
		esac
		;;
	  *)
	  	# Failed to stop
		log_end_msg 1
		;;
	esac
	;;
  *)
	#echo "Usage: $SCRIPTNAME {start|stop|restart|reload|force-reload}" >&2
	echo "Usage: $SCRIPTNAME {start|stop|status|restart|force-reload}" >&2
	exit 3
	;;
esac

:
