{
  "files": 13, 
  "nb_test": 835, 
  "nb_error": 0, 
  "classification": {
    "singleLine": false
  }, 
  "failing_tests": [
    "DoubleParserTest>ParserTestBase.testInValidStringInIsolation:249 Parser accepted the invalid value  1.", 
    "DoubleParserTest>ParserTestBase.testInValidStringsMixedIn:294 Parser accepted the invalid value  1.", 
    "DoubleParserTest>ParserTestBase.testStaticParseMethodWithInvalidValues:362 Static parse method accepted invalid value", 
    "IntParserTest>ParserTestBase.testEmptyFieldInIsolation:430 Parser accepted the empty string.", 
    "DoubleValueParserTest>ParserTestBase.testInValidStringInIsolation:249 Parser accepted the invalid value  1.", 
    "DoubleValueParserTest>ParserTestBase.testInValidStringsMixedIn:294 Parser accepted the invalid value  1.", 
    "ByteParserTest>ParserTestBase.testEmptyFieldInIsolation:430 Parser accepted the empty string.", 
    "IntValueParserTest>ParserTestBase.testEmptyFieldInIsolation:430 Parser accepted the empty string.", 
    "ShortParserTest>ParserTestBase.testEmptyFieldInIsolation:430 Parser accepted the empty string.", 
    "ByteValueParserTest>ParserTestBase.testEmptyFieldInIsolation:430 Parser accepted the empty string.", 
    "FloatParserTest>ParserTestBase.testInValidStringInIsolation:249 Parser accepted the invalid value  1.", 
    "FloatParserTest>ParserTestBase.testInValidStringsMixedIn:294 Parser accepted the invalid value  1.", 
    "LongValueParserTest>ParserTestBase.testEmptyFieldInIsolation:430 Parser accepted the empty string.", 
    "FloatParserTest>ParserTestBase.testStaticParseMethodWithInvalidValues:362 Static parse method accepted invalid value", 
    "ShortValueParserTest>ParserTestBase.testEmptyFieldInIsolation:430 Parser accepted the empty string.", 
    "FloatValueParserTest>ParserTestBase.testInValidStringInIsolation:249 Parser accepted the invalid value  1.", 
    "FloatValueParserTest>ParserTestBase.testInValidStringsMixedIn:294 Parser accepted the invalid value  1.", 
    "LongParserTest>ParserTestBase.testEmptyFieldInIsolation:430 Parser accepted the empty string."
  ], 
  "patch": "diff --git a/flink-core/src/main/java/org/apache/flink/types/parser/ByteParser.java b/flink-core/src/main/java/org/apache/flink/types/parser/ByteParser.java\nindex 5858da2..09e517a 100644\n--- a/flink-core/src/main/java/org/apache/flink/types/parser/ByteParser.java\n+++ b/flink-core/src/main/java/org/apache/flink/types/parser/ByteParser.java\n@@ -36,7 +36,8 @@ public int parseField(byte[] bytes, int startPos, int limit, byte[] delimiter, B\n \t\t\tstartPos++;\n \n \t\t\t// check for empty field with only the sign\n-\t\t\tif (startPos == limit || (startPos < delimLimit && delimiterNext(bytes, startPos, delimiter))) {\n+\t\t\tif (startPos == limit || (startPos < delimLimit && delimiterNext(bytes, startPos, \n+\t\t\t\tdelimiter))) {\n \t\t\t\tsetErrorState(ParseErrorState.NUMERIC_VALUE_ORPHAN_SIGN);\n \t\t\t\treturn -1;\n \t\t\t}\n@@ -44,6 +45,10 @@ public int parseField(byte[] bytes, int startPos, int limit, byte[] delimiter, B\n \n \t\tfor (int i = startPos; i < limit; i++) {\n \t\t\tif (i < delimLimit && delimiterNext(bytes, i, delimiter)) {\n+\t\t\t\tif (i == startPos) {\n+\t\t\t\t\tsetErrorState(ParseErrorState.EMPTY_STRING);\n+\t\t\t\t\treturn -1;\n+\t\t\t\t}\n \t\t\t\tthis.result = (byte) (neg ? -val : val);\n \t\t\t\treturn i + delimiter.length;\n \t\t\t}\n@@ -75,38 +80,35 @@ public Byte getLastResult() {\n \t}\n \n \t/**\n-\t * Static utility to parse a field of type byte from a byte sequence that represents text characters\n+\t * Static utility to parse a field of type byte from a byte sequence that represents text \n+\t * characters\n \t * (such as when read from a file stream).\n \t *\n \t * @param bytes    The bytes containing the text data that should be parsed.\n \t * @param startPos The offset to start the parsing.\n \t * @param length   The length of the byte sequence (counting from the offset).\n-\t * \n \t * @return The parsed value.\n-\t * \n-\t * @throws NumberFormatException Thrown when the value cannot be parsed because the text represents not a correct number.\n+\t * @throws NumberFormatException Thrown when the value cannot be parsed because the text \n+\t * represents not a correct number.\n \t */\n \tpublic static final byte parseField(byte[] bytes, int startPos, int length) {\n \t\treturn parseField(bytes, startPos, length, (char) 0xffff);\n \t}\n \n \t/**\n-\t * Static utility to parse a field of type byte from a byte sequence that represents text characters\n+\t * Static utility to parse a field of type byte from a byte sequence that represents text \n+\t * characters\n \t * (such as when read from a file stream).\n \t *\n \t * @param bytes     The bytes containing the text data that should be parsed.\n \t * @param startPos  The offset to start the parsing.\n \t * @param length    The length of the byte sequence (counting from the offset).\n \t * @param delimiter The delimiter that terminates the field.\n-\t * \n \t * @return The parsed value.\n-\t * \n-\t * @throws NumberFormatException Thrown when the value cannot be parsed because the text represents not a correct number.\n+\t * @throws NumberFormatException Thrown when the value cannot be parsed because the text \n+\t * represents not a correct number.\n \t */\n \tpublic static final byte parseField(byte[] bytes, int startPos, int length, char delimiter) {\n-\t\tif (length <= 0) {\n-\t\t\tthrow new NumberFormatException(\"Invalid input: Empty string\");\n-\t\t}\n \t\tlong val = 0;\n \t\tboolean neg = false;\n \n@@ -121,7 +123,7 @@ public static final byte parseField(byte[] bytes, int startPos, int length, char\n \n \t\tfor (; length > 0; startPos++, length--) {\n \t\t\tif (bytes[startPos] == delimiter) {\n-\t\t\t\treturn (byte) (neg ? -val : val);\n+\t\t\t\tthrow new NumberFormatException(\"Empty field.\");\n \t\t\t}\n \t\t\tif (bytes[startPos] < 48 || bytes[startPos] > 57) {\n \t\t\t\tthrow new NumberFormatException(\"Invalid character.\");\ndiff --git a/flink-core/src/main/java/org/apache/flink/types/parser/ByteValueParser.java b/flink-core/src/main/java/org/apache/flink/types/parser/ByteValueParser.java\nindex f9b36e4..612a1cb 100644\n--- a/flink-core/src/main/java/org/apache/flink/types/parser/ByteValueParser.java\n+++ b/flink-core/src/main/java/org/apache/flink/types/parser/ByteValueParser.java\n@@ -52,6 +52,10 @@ public int parseField(byte[] bytes, int startPos, int limit, byte[] delimiter, B\n \t\tfor (int i = startPos; i < limit; i++) {\n \n \t\t\tif (i < delimLimit && delimiterNext(bytes, i, delimiter)) {\n+\t\t\t\tif (i == startPos) {\n+\t\t\t\t\tsetErrorState(ParseErrorState.EMPTY_STRING);\n+\t\t\t\t\treturn -1;\n+\t\t\t\t}\n \t\t\t\treusable.setValue((byte) (neg ? -val : val));\n \t\t\t\treturn i + delimiter.length;\n \t\t\t}\ndiff --git a/flink-core/src/main/java/org/apache/flink/types/parser/DoubleParser.java b/flink-core/src/main/java/org/apache/flink/types/parser/DoubleParser.java\nindex 947fdfe..086c1f5 100644\n--- a/flink-core/src/main/java/org/apache/flink/types/parser/DoubleParser.java\n+++ b/flink-core/src/main/java/org/apache/flink/types/parser/DoubleParser.java\n@@ -42,11 +42,15 @@ public int parseField(byte[] bytes, int startPos, int limit, byte[] delimiter, D\n \t\t}\n \n \t\tString str = new String(bytes, startPos, i - startPos);\n+\t\tint len = str.length();\n+\t\tif (Character.isWhitespace(bytes[startPos]) || Character.isWhitespace(bytes[Math.max(i - 1, 0)])) {\n+\t\t\tsetErrorState(ParseErrorState.WHITESPACE_IN_NUMERIC_FIELD);\n+\t\t\treturn -1;\n+\t\t}\n \t\ttry {\n \t\t\tthis.result = Double.parseDouble(str);\n \t\t\treturn (i == limit) ? limit : i + delimiter.length;\n-\t\t}\n-\t\tcatch (NumberFormatException e) {\n+\t\t} catch (NumberFormatException e) {\n \t\t\tsetErrorState(ParseErrorState.NUMERIC_VALUE_FORMAT_ERROR);\n \t\t\treturn -1;\n \t\t}\n@@ -63,33 +67,33 @@ public Double getLastResult() {\n \t}\n \n \t/**\n-\t * Static utility to parse a field of type double from a byte sequence that represents text characters\n+\t * Static utility to parse a field of type double from a byte sequence that represents text \n+\t * characters\n \t * (such as when read from a file stream).\n \t *\n \t * @param bytes    The bytes containing the text data that should be parsed.\n \t * @param startPos The offset to start the parsing.\n \t * @param length   The length of the byte sequence (counting from the offset).\n-\t * \n \t * @return The parsed value.\n-\t * \n-\t * @throws NumberFormatException Thrown when the value cannot be parsed because the text represents not a correct number.\n+\t * @throws NumberFormatException Thrown when the value cannot be parsed because the text \n+\t * represents not a correct number.\n \t */\n \tpublic static final double parseField(byte[] bytes, int startPos, int length) {\n \t\treturn parseField(bytes, startPos, length, (char) 0xffff);\n \t}\n \n \t/**\n-\t * Static utility to parse a field of type double from a byte sequence that represents text characters\n+\t * Static utility to parse a field of type double from a byte sequence that represents text \n+\t * characters\n \t * (such as when read from a file stream).\n \t *\n \t * @param bytes     The bytes containing the text data that should be parsed.\n \t * @param startPos  The offset to start the parsing.\n \t * @param length    The length of the byte sequence (counting from the offset).\n \t * @param delimiter The delimiter that terminates the field.\n-\t * \n \t * @return The parsed value.\n-\t * \n-\t * @throws NumberFormatException Thrown when the value cannot be parsed because the text represents not a correct number.\n+\t * @throws NumberFormatException Thrown when the value cannot be parsed because the text \n+\t * represents not a correct number.\n \t */\n \tpublic static final double parseField(byte[] bytes, int startPos, int length, char delimiter) {\n \t\tif (length <= 0) {\n@@ -102,7 +106,12 @@ public static final double parseField(byte[] bytes, int startPos, int length, ch\n \t\t\ti++;\n \t\t}\n \n-\t\tString str = new String(bytes, startPos, i);\n+\t\tString str = new String(bytes, startPos, i - startPos);\n+\t\tint len = str.length();\n+\t\tif (Character.isWhitespace(bytes[startPos]) || Character.isWhitespace(bytes[Math.max(i - 1, 0)])) {\n+\t\t\tthrow new NumberFormatException(\"There is leading or trailing whitespace in the \" +\n+\t\t\t\t\"numeric field: \" + str);\n+\t\t}\n \t\treturn Double.parseDouble(str);\n \t}\n }\ndiff --git a/flink-core/src/main/java/org/apache/flink/types/parser/DoubleValueParser.java b/flink-core/src/main/java/org/apache/flink/types/parser/DoubleValueParser.java\nindex e225c1f..7751831 100644\n--- a/flink-core/src/main/java/org/apache/flink/types/parser/DoubleValueParser.java\n+++ b/flink-core/src/main/java/org/apache/flink/types/parser/DoubleValueParser.java\n@@ -43,6 +43,10 @@ public int parseField(byte[] bytes, int startPos, int limit, byte[] delimiter, D\n \t\t}\n \t\t\n \t\tString str = new String(bytes, startPos, i - startPos);\n+\t\tif (Character.isWhitespace(bytes[startPos]) || Character.isWhitespace(bytes[Math.max(i - 1, 0)])) {\n+\t\t\tsetErrorState(ParseErrorState.WHITESPACE_IN_NUMERIC_FIELD);\n+\t\t\treturn -1;\n+\t\t}\n \t\ttry {\n \t\t\tdouble value = Double.parseDouble(str);\n \t\t\treusable.setValue(value);\ndiff --git a/flink-core/src/main/java/org/apache/flink/types/parser/FieldParser.java b/flink-core/src/main/java/org/apache/flink/types/parser/FieldParser.java\nindex 33697fd..55e9915 100644\n--- a/flink-core/src/main/java/org/apache/flink/types/parser/FieldParser.java\n+++ b/flink-core/src/main/java/org/apache/flink/types/parser/FieldParser.java\n@@ -64,7 +64,13 @@\n \t\tUNTERMINATED_QUOTED_STRING,\n \n \t\t/** The parser found characters between the end of the quoted string and the delimiter. */\n-\t\tUNQUOTED_CHARS_AFTER_QUOTED_STRING\n+\t\tUNQUOTED_CHARS_AFTER_QUOTED_STRING,\n+\t\t\n+\t\t/** The string is empty. */\n+\t\tEMPTY_STRING,\n+\n+\t\t/** There is whitespace in a numeric field. */\n+\t\tWHITESPACE_IN_NUMERIC_FIELD\n \t}\n \t\n \tprivate ParseErrorState errorState = ParseErrorState.NONE;\ndiff --git a/flink-core/src/main/java/org/apache/flink/types/parser/FloatParser.java b/flink-core/src/main/java/org/apache/flink/types/parser/FloatParser.java\nindex 7d166c7..be98aa1 100644\n--- a/flink-core/src/main/java/org/apache/flink/types/parser/FloatParser.java\n+++ b/flink-core/src/main/java/org/apache/flink/types/parser/FloatParser.java\n@@ -27,7 +27,8 @@\n \tprivate float result;\n \t\n \t@Override\n-\tpublic int parseField(byte[] bytes, int startPos, int limit, byte[] delimiter, Float reusable) {\n+\tpublic int parseField(byte[] bytes, int startPos, int limit, byte[] delimiter, Float \n+\t\treusable) {\n \n \t\tint i = startPos;\n \n@@ -40,12 +41,17 @@ public int parseField(byte[] bytes, int startPos, int limit, byte[] delimiter, F\n \t\t\ti++;\n \t\t}\n \n+\t\tif (Character.isWhitespace(bytes[startPos]) || Character.isWhitespace(bytes[Math.max(i - 1, 0)])) {\n+\t\t\tsetErrorState(ParseErrorState.WHITESPACE_IN_NUMERIC_FIELD);\n+\t\t\treturn -1;\n+\t\t}\n+\n \t\tString str = new String(bytes, startPos, i - startPos);\n+\t\tint len = str.length();\n \t\ttry {\n \t\t\tthis.result = Float.parseFloat(str);\n \t\t\treturn (i == limit) ? limit : i + delimiter.length;\n-\t\t}\n-\t\tcatch (NumberFormatException e) {\n+\t\t} catch (NumberFormatException e) {\n \t\t\tsetErrorState(ParseErrorState.NUMERIC_VALUE_FORMAT_ERROR);\n \t\t\treturn -1;\n \t\t}\n@@ -62,33 +68,33 @@ public Float getLastResult() {\n \t}\n \n \t/**\n-\t * Static utility to parse a field of type float from a byte sequence that represents text characters\n+\t * Static utility to parse a field of type float from a byte sequence that represents text \n+\t * characters\n \t * (such as when read from a file stream).\n \t *\n \t * @param bytes    The bytes containing the text data that should be parsed.\n \t * @param startPos The offset to start the parsing.\n \t * @param length   The length of the byte sequence (counting from the offset).\n-\t * \n \t * @return The parsed value.\n-\t * \n-\t * @throws NumberFormatException Thrown when the value cannot be parsed because the text represents not a correct number.\n+\t * @throws NumberFormatException Thrown when the value cannot be parsed because the text \n+\t * represents not a correct number.\n \t */\n \tpublic static final float parseField(byte[] bytes, int startPos, int length) {\n \t\treturn parseField(bytes, startPos, length, (char) 0xffff);\n \t}\n \n \t/**\n-\t * Static utility to parse a field of type float from a byte sequence that represents text characters\n+\t * Static utility to parse a field of type float from a byte sequence that represents text \n+\t * characters\n \t * (such as when read from a file stream).\n \t *\n \t * @param bytes     The bytes containing the text data that should be parsed.\n \t * @param startPos  The offset to start the parsing.\n \t * @param length    The length of the byte sequence (counting from the offset).\n \t * @param delimiter The delimiter that terminates the field.\n-\t * \n \t * @return The parsed value.\n-\t * \n-\t * @throws NumberFormatException Thrown when the value cannot be parsed because the text represents not a correct number.\n+\t * @throws NumberFormatException Thrown when the value cannot be parsed because the text \n+\t * represents not a correct number.\n \t */\n \tpublic static final float parseField(byte[] bytes, int startPos, int length, char delimiter) {\n \t\tif (length <= 0) {\n@@ -101,7 +107,12 @@ public static final float parseField(byte[] bytes, int startPos, int length, cha\n \t\t\ti++;\n \t\t}\n \t\t\n-\t\tString str = new String(bytes, startPos, i);\n+\t\tString str = new String(bytes, startPos, i - startPos);\n+\t\tif (Character.isWhitespace(bytes[startPos]) || Character.isWhitespace(bytes[Math.max(i - 1, 0)])) {\n+\t\t\tthrow new NumberFormatException(\"There is leading or trailing whitespace in the \" +\n+\t\t\t\t\"numeric field: \" + str);\n+\t\t}\n+\t\tint len = str.length();\n \t\treturn Float.parseFloat(str);\n \t}\n }\ndiff --git a/flink-core/src/main/java/org/apache/flink/types/parser/FloatValueParser.java b/flink-core/src/main/java/org/apache/flink/types/parser/FloatValueParser.java\nindex af16d4c..e8caac2 100644\n--- a/flink-core/src/main/java/org/apache/flink/types/parser/FloatValueParser.java\n+++ b/flink-core/src/main/java/org/apache/flink/types/parser/FloatValueParser.java\n@@ -43,6 +43,10 @@ public int parseField(byte[] bytes, int startPos, int limit, byte[] delimiter, F\n \t\t}\n \t\t\n \t\tString str = new String(bytes, startPos, i - startPos);\n+\t\tif (Character.isWhitespace(bytes[startPos]) || Character.isWhitespace(bytes[Math.max(i - 1, 0)])) {\n+\t\t\tsetErrorState(ParseErrorState.WHITESPACE_IN_NUMERIC_FIELD);\n+\t\t\treturn -1;\n+\t\t}\n \t\ttry {\n \t\t\tfloat value = Float.parseFloat(str);\n \t\t\treusable.setValue(value);\ndiff --git a/flink-core/src/main/java/org/apache/flink/types/parser/IntParser.java b/flink-core/src/main/java/org/apache/flink/types/parser/IntParser.java\nindex c871f4a..dcd2ec2 100644\n--- a/flink-core/src/main/java/org/apache/flink/types/parser/IntParser.java\n+++ b/flink-core/src/main/java/org/apache/flink/types/parser/IntParser.java\n@@ -32,7 +32,8 @@\n \tprivate int result;\n \n \t@Override\n-\tpublic int parseField(byte[] bytes, int startPos, int limit, byte[] delimiter, Integer reusable) {\n+\tpublic int parseField(byte[] bytes, int startPos, int limit, byte[] delimiter, Integer \n+\t\treusable) {\n \t\tlong val = 0;\n \t\tboolean neg = false;\n \n@@ -43,7 +44,8 @@ public int parseField(byte[] bytes, int startPos, int limit, byte[] delimiter, I\n \t\t\tstartPos++;\n \n \t\t\t// check for empty field with only the sign\n-\t\t\tif (startPos == limit || ( startPos < delimLimit && delimiterNext(bytes, startPos, delimiter))) {\n+\t\t\tif (startPos == limit || (startPos < delimLimit && delimiterNext(bytes, startPos, \n+\t\t\t\tdelimiter))) {\n \t\t\t\tsetErrorState(ParseErrorState.NUMERIC_VALUE_ORPHAN_SIGN);\n \t\t\t\treturn -1;\n \t\t\t}\n@@ -51,6 +53,10 @@ public int parseField(byte[] bytes, int startPos, int limit, byte[] delimiter, I\n \n \t\tfor (int i = startPos; i < limit; i++) {\n \t\t\tif (i < delimLimit && delimiterNext(bytes, i, delimiter)) {\n+\t\t\t\tif (i == startPos) {\n+\t\t\t\t\tsetErrorState(ParseErrorState.EMPTY_STRING);\n+\t\t\t\t\treturn -1;\n+\t\t\t\t}\n \t\t\t\tthis.result = (int) (neg ? -val : val);\n \t\t\t\treturn i + delimiter.length;\n \t\t\t}\n@@ -82,38 +88,35 @@ public Integer getLastResult() {\n \t}\n \n \t/**\n-\t * Static utility to parse a field of type int from a byte sequence that represents text characters\n+\t * Static utility to parse a field of type int from a byte sequence that represents text \n+\t * characters\n \t * (such as when read from a file stream).\n \t *\n \t * @param bytes    The bytes containing the text data that should be parsed.\n \t * @param startPos The offset to start the parsing.\n \t * @param length   The length of the byte sequence (counting from the offset).\n-\t * \n \t * @return The parsed value.\n-\t * \n-\t * @throws NumberFormatException Thrown when the value cannot be parsed because the text represents not a correct number.\n+\t * @throws NumberFormatException Thrown when the value cannot be parsed because the text \n+\t * represents not a correct number.\n \t */\n \tpublic static final int parseField(byte[] bytes, int startPos, int length) {\n \t\treturn parseField(bytes, startPos, length, (char) 0xffff);\n \t}\n \n \t/**\n-\t * Static utility to parse a field of type int from a byte sequence that represents text characters\n+\t * Static utility to parse a field of type int from a byte sequence that represents text \n+\t * characters\n \t * (such as when read from a file stream).\n \t *\n \t * @param bytes     The bytes containing the text data that should be parsed.\n \t * @param startPos  The offset to start the parsing.\n \t * @param length    The length of the byte sequence (counting from the offset).\n \t * @param delimiter The delimiter that terminates the field.\n-\t * \n \t * @return The parsed value.\n-\t * \n-\t * @throws NumberFormatException Thrown when the value cannot be parsed because the text represents not a correct number.\n+\t * @throws NumberFormatException Thrown when the value cannot be parsed because the text \n+\t * represents not a correct number.\n \t */\n \tpublic static final int parseField(byte[] bytes, int startPos, int length, char delimiter) {\n-\t\tif (length <= 0) {\n-\t\t\tthrow new NumberFormatException(\"Invalid input: Empty string\");\n-\t\t}\n \t\tlong val = 0;\n \t\tboolean neg = false;\n \n@@ -128,7 +131,7 @@ public static final int parseField(byte[] bytes, int startPos, int length, char\n \n \t\tfor (; length > 0; startPos++, length--) {\n \t\t\tif (bytes[startPos] == delimiter) {\n-\t\t\t\treturn (int) (neg ? -val : val);\n+\t\t\t\tthrow new NumberFormatException(\"Empty field.\");\n \t\t\t}\n \t\t\tif (bytes[startPos] < 48 || bytes[startPos] > 57) {\n \t\t\t\tthrow new NumberFormatException(\"Invalid character.\");\ndiff --git a/flink-core/src/main/java/org/apache/flink/types/parser/IntValueParser.java b/flink-core/src/main/java/org/apache/flink/types/parser/IntValueParser.java\nindex 8cb8176..abd8615 100644\n--- a/flink-core/src/main/java/org/apache/flink/types/parser/IntValueParser.java\n+++ b/flink-core/src/main/java/org/apache/flink/types/parser/IntValueParser.java\n@@ -54,6 +54,10 @@ public int parseField(byte[] bytes, int startPos, int limit, byte[] delimiter, I\n \t\t\n \t\tfor (int i = startPos; i < limit; i++) {\n \t\t\tif (i < delimLimit && delimiterNext(bytes, i, delimiter)) {\n+\t\t\t\tif (i == startPos) {\n+\t\t\t\t\tsetErrorState(ParseErrorState.EMPTY_STRING);\n+\t\t\t\t\treturn -1;\n+\t\t\t\t}\n \t\t\t\treusable.setValue((int) (neg ? -val : val));\n \t\t\t\treturn i + delimiter.length;\n \t\t\t}\ndiff --git a/flink-core/src/main/java/org/apache/flink/types/parser/LongParser.java b/flink-core/src/main/java/org/apache/flink/types/parser/LongParser.java\nindex af17f15..bb6c7c9 100644\n--- a/flink-core/src/main/java/org/apache/flink/types/parser/LongParser.java\n+++ b/flink-core/src/main/java/org/apache/flink/types/parser/LongParser.java\n@@ -47,6 +47,10 @@ public int parseField(byte[] bytes, int startPos, int limit, byte[] delimiter, L\n \n \t\tfor (int i = startPos; i < limit; i++) {\n \t\t\tif (i < delimLimit && delimiterNext(bytes, i, delimiter)) {\n+\t\t\t\tif (i == startPos) {\n+\t\t\t\t\tsetErrorState(ParseErrorState.EMPTY_STRING);\n+\t\t\t\t\treturn -1;\n+\t\t\t\t}\n \t\t\t\tthis.result = neg ? -val : val;\n \t\t\t\treturn i + delimiter.length;\n \t\t\t}\n@@ -123,9 +127,6 @@ public static final long parseField(byte[] bytes, int startPos, int length) {\n \t * @throws NumberFormatException Thrown when the value cannot be parsed because the text represents not a correct number.\n \t */\n \tpublic static final long parseField(byte[] bytes, int startPos, int length, char delimiter) {\n-\t\tif (length <= 0) {\n-\t\t\tthrow new NumberFormatException(\"Invalid input: Empty string\");\n-\t\t}\n \t\tlong val = 0;\n \t\tboolean neg = false;\n \n@@ -140,7 +141,7 @@ public static final long parseField(byte[] bytes, int startPos, int length, char\n \n \t\tfor (; length > 0; startPos++, length--) {\n \t\t\tif (bytes[startPos] == delimiter) {\n-\t\t\t\treturn neg ? -val : val;\n+\t\t\t\tthrow new NumberFormatException(\"Empty field.\");\n \t\t\t}\n \t\t\tif (bytes[startPos] < 48 || bytes[startPos] > 57) {\n \t\t\t\tthrow new NumberFormatException(\"Invalid character.\");\ndiff --git a/flink-core/src/main/java/org/apache/flink/types/parser/LongValueParser.java b/flink-core/src/main/java/org/apache/flink/types/parser/LongValueParser.java\nindex 8b697cc..a99a86e 100644\n--- a/flink-core/src/main/java/org/apache/flink/types/parser/LongValueParser.java\n+++ b/flink-core/src/main/java/org/apache/flink/types/parser/LongValueParser.java\n@@ -51,6 +51,10 @@ public int parseField(byte[] bytes, int startPos, int limit, byte[] delimiter, L\n \t\t\n \t\tfor (int i = startPos; i < limit; i++) {\n \t\t\tif (i < delimLimit && delimiterNext(bytes, i, delimiter)) {\n+\t\t\t\tif (i == startPos) {\n+\t\t\t\t\tsetErrorState(ParseErrorState.EMPTY_STRING);\n+\t\t\t\t\treturn -1;\n+\t\t\t\t}\n \t\t\t\treusable.setValue(neg ? -val : val);\n \t\t\t\treturn i + delimiter.length;\n \t\t\t}\ndiff --git a/flink-core/src/main/java/org/apache/flink/types/parser/ShortParser.java b/flink-core/src/main/java/org/apache/flink/types/parser/ShortParser.java\nindex a6f9898..6e04d60 100644\n--- a/flink-core/src/main/java/org/apache/flink/types/parser/ShortParser.java\n+++ b/flink-core/src/main/java/org/apache/flink/types/parser/ShortParser.java\n@@ -51,6 +51,10 @@ public int parseField(byte[] bytes, int startPos, int limit, byte[] delimiter, S\n \n \t\tfor (int i = startPos; i < limit; i++) {\n \t\t\tif (i < delimLimit && delimiterNext(bytes, i, delimiter)) {\n+\t\t\t\tif (i == startPos) {\n+\t\t\t\t\tsetErrorState(ParseErrorState.EMPTY_STRING);\n+\t\t\t\t\treturn -1;\n+\t\t\t\t}\n \t\t\t\tthis.result = (short) (neg ? -val : val);\n \t\t\t\treturn i + delimiter.length;\n \t\t\t}\n@@ -111,9 +115,6 @@ public static final short parseField(byte[] bytes, int startPos, int length) {\n \t * @throws NumberFormatException Thrown when the value cannot be parsed because the text represents not a correct number.\n \t */\n \tpublic static final short parseField(byte[] bytes, int startPos, int length, char delimiter) {\n-\t\tif (length <= 0) {\n-\t\t\tthrow new NumberFormatException(\"Invalid input: Empty string\");\n-\t\t}\n \t\tlong val = 0;\n \t\tboolean neg = false;\n \n@@ -128,7 +129,7 @@ public static final short parseField(byte[] bytes, int startPos, int length, cha\n \n \t\tfor (; length > 0; startPos++, length--) {\n \t\t\tif (bytes[startPos] == delimiter) {\n-\t\t\t\treturn (short) (neg ? -val : val);\n+\t\t\t\tthrow new NumberFormatException(\"Empty field.\");\n \t\t\t}\n \t\t\tif (bytes[startPos] < 48 || bytes[startPos] > 57) {\n \t\t\t\tthrow new NumberFormatException(\"Invalid character.\");\ndiff --git a/flink-core/src/main/java/org/apache/flink/types/parser/ShortValueParser.java b/flink-core/src/main/java/org/apache/flink/types/parser/ShortValueParser.java\nindex f5168cc..4289d1a 100644\n--- a/flink-core/src/main/java/org/apache/flink/types/parser/ShortValueParser.java\n+++ b/flink-core/src/main/java/org/apache/flink/types/parser/ShortValueParser.java\n@@ -54,6 +54,10 @@ public int parseField(byte[] bytes, int startPos, int limit, byte[] delimiter, S\n \t\t\n \t\tfor (int i = startPos; i < limit; i++) {\n \t\t\tif (i < delimLimit && delimiterNext(bytes, i, delimiter)) {\n+\t\t\t\tif (i == startPos) {\n+\t\t\t\t\tsetErrorState(ParseErrorState.EMPTY_STRING);\n+\t\t\t\t\treturn -1;\n+\t\t\t\t}\n \t\t\t\treusable.setValue((short) (neg ? -val : val));\n \t\t\t\treturn i + delimiter.length;\n \t\t\t}\n", 
  "project": "flink", 
  "linesAdd": 116, 
  "jira_id": "1820", 
  "nb_skipped": 0, 
  "commit": "39d526e6", 
  "nb_failure": 18, 
  "linesRem": 59
}