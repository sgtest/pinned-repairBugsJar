{
  "files": 3, 
  "nb_test": 5909, 
  "nb_error": 0, 
  "classification": {
    "singleLine": false
  }, 
  "failing_tests": [
    "GaussNewtonOptimizerWithLUTest>AbstractLeastSquaresOptimizerAbstractTest.testPointCopy:556", 
    "Expected: not sameInstance(<{1; 2; 3}>)", 
    "but: was <{1; 2; 3}>", 
    "LevenbergMarquardtOptimizerTest>AbstractLeastSquaresOptimizerAbstractTest.testPointCopy:556 arrays first differed at element [0]; expected:<0.0> but was:<0.9999999999999996>", 
    "GaussNewtonOptimizerWithCholeskyTest>AbstractLeastSquaresOptimizerAbstractTest.testPointCopy:556", 
    "Expected: not sameInstance(<{1; 2; 3}>)", 
    "but: was <{1; 2; 3}>", 
    "EvaluationTest.testEvaluateCopiesPoint:215 expected not same", 
    "GaussNewtonOptimizerWithQRTest>AbstractLeastSquaresOptimizerAbstractTest.testPointCopy:556", 
    "Expected: not sameInstance(<{1; 2; 3}>)", 
    "but: was <{1; 2; 3}>"
  ], 
  "patch": "diff --git a/src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java b/src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java\nindex 9240856..c17c870 100644\n--- a/src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java\n@@ -197,9 +197,7 @@ public Optimum optimize(final LeastSquaresProblem lsp) {\n             throw new NullArgumentException();\n         }\n \n-        final int nC = lsp.getParameterSize();\n-\n-        final RealVector currentPoint = lsp.getStart();\n+        RealVector currentPoint = lsp.getStart();\n \n         // iterate until convergence is reached\n         Evaluation current = null;\n@@ -227,9 +225,7 @@ public Optimum optimize(final LeastSquaresProblem lsp) {\n             // solve the linearized least squares problem\n             final RealVector dX = this.decomposition.solve(weightedJacobian, currentResiduals);\n             // update the estimated parameters\n-            for (int i = 0; i < nC; ++i) {\n-                currentPoint.setEntry(i, currentPoint.getEntry(i) + dX.getEntry(i));\n-            }\n+            currentPoint = currentPoint.add(dX);\n         }\n     }\n \ndiff --git a/src/main/java/org/apache/commons/math3/fitting/leastsquares/LeastSquaresFactory.java b/src/main/java/org/apache/commons/math3/fitting/leastsquares/LeastSquaresFactory.java\nindex 0853d03..16ac659 100644\n--- a/src/main/java/org/apache/commons/math3/fitting/leastsquares/LeastSquaresFactory.java\n+++ b/src/main/java/org/apache/commons/math3/fitting/leastsquares/LeastSquaresFactory.java\n@@ -332,7 +332,8 @@ public Evaluation evaluate(final RealVector point) {\n                     value.getFirst(),\n                     value.getSecond(),\n                     this.target,\n-                    point);\n+                    // copy so optimizer can change point without changing our instance\n+                    point.copy());\n         }\n \n         /**\ndiff --git a/src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java b/src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java\nindex 1cd4e51..5f0527c 100644\n--- a/src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java\n@@ -328,7 +328,7 @@ public Optimum optimize(final LeastSquaresProblem problem) {\n         // Evaluate the function at the starting point and calculate its norm.\n         evaluationCounter.incrementCount();\n         //value will be reassigned in the loop\n-        Evaluation current = problem.evaluate(new ArrayRealVector(currentPoint, false));\n+        Evaluation current = problem.evaluate(new ArrayRealVector(currentPoint));\n         double[] currentResiduals = current.getResiduals().toArray();\n         double currentCost = current.getCost();\n \n@@ -445,7 +445,7 @@ public Optimum optimize(final LeastSquaresProblem problem) {\n \n                 // Evaluate the function at x + p and calculate its norm.\n                 evaluationCounter.incrementCount();\n-                current = problem.evaluate(new ArrayRealVector(currentPoint,false));\n+                current = problem.evaluate(new ArrayRealVector(currentPoint));\n                 currentResiduals = current.getResiduals().toArray();\n                 currentCost = current.getCost();\n \n", 
  "project": "commons-math", 
  "linesAdd": 6, 
  "jira_id": "1103", 
  "nb_skipped": 3, 
  "commit": "a6f96306", 
  "nb_failure": 5, 
  "linesRem": 9
}