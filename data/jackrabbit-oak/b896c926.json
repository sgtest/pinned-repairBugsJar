{
  "files": 1, 
  "nb_test": 705, 
  "nb_error": 23, 
  "classification": {
    "singleLine": false
  }, 
  "failing_tests": [
    "testPrivilegeFromName(org.apache.jackrabbit.oak.security.authorization.AccessControlManagerImplTest)", 
    "testGetApplicablePolicies(org.apache.jackrabbit.oak.security.authorization.AccessControlManagerImplTest)", 
    "testGetApplicableRepoPolicies(org.apache.jackrabbit.oak.security.authorization.AccessControlManagerImplTest)", 
    "testGetApplicablePoliciesForAccessControlled(org.apache.jackrabbit.oak.security.authorization.AccessControlManagerImplTest)", 
    "testGetApplicablePoliciesForAcContentPaths(org.apache.jackrabbit.oak.security.authorization.AccessControlManagerImplTest)", 
    "testGetPolicies(org.apache.jackrabbit.oak.security.authorization.AccessControlManagerImplTest)", 
    "testGetPoliciesAfterSet(org.apache.jackrabbit.oak.security.authorization.AccessControlManagerImplTest)", 
    "testGetPoliciesAfterRemove(org.apache.jackrabbit.oak.security.authorization.AccessControlManagerImplTest)", 
    "testGetPolicyWithInvalidPrincipal(org.apache.jackrabbit.oak.security.authorization.AccessControlManagerImplTest)", 
    "testGetRepoPolicies(org.apache.jackrabbit.oak.security.authorization.AccessControlManagerImplTest)", 
    "testGetPoliciesAcContentPaths(org.apache.jackrabbit.oak.security.authorization.AccessControlManagerImplTest)", 
    "testGetEffectivePoliciesForAcContentPaths(org.apache.jackrabbit.oak.security.authorization.AccessControlManagerImplTest)", 
    "testSetPolicy(org.apache.jackrabbit.oak.security.authorization.AccessControlManagerImplTest)", 
    "testSetPolicyWritesAcContent(org.apache.jackrabbit.oak.security.authorization.AccessControlManagerImplTest)", 
    "testModifyExistingPolicy(org.apache.jackrabbit.oak.security.authorization.AccessControlManagerImplTest)", 
    "testSetPolicyAcContent(org.apache.jackrabbit.oak.security.authorization.AccessControlManagerImplTest)", 
    "testRemovePolicyAcContent(org.apache.jackrabbit.oak.security.authorization.AccessControlManagerImplTest)", 
    "testOakToJcr(org.apache.jackrabbit.oak.namepath.NamePathMapperImplTest)", 
    "testEmptyName(org.apache.jackrabbit.oak.namepath.NamePathMapperImplTest)", 
    "testEquals(org.apache.jackrabbit.oak.spi.security.authorization.restriction.RestrictionImplTest)", 
    "testGetJcrName(org.apache.jackrabbit.oak.spi.security.authorization.restriction.RestrictionImplTest)", 
    "testEquals(org.apache.jackrabbit.oak.spi.security.authorization.restriction.RestrictionDefinitionImplTest)", 
    "testGetJcrName(org.apache.jackrabbit.oak.spi.security.authorization.restriction.RestrictionDefinitionImplTest)"
  ], 
  "patch": "diff --git a/oak-core/src/main/java/org/apache/jackrabbit/oak/namepath/LocalNameMapper.java b/oak-core/src/main/java/org/apache/jackrabbit/oak/namepath/LocalNameMapper.java\nindex f17a69b..eb558c5 100644\n--- a/oak-core/src/main/java/org/apache/jackrabbit/oak/namepath/LocalNameMapper.java\n+++ b/oak-core/src/main/java/org/apache/jackrabbit/oak/namepath/LocalNameMapper.java\n@@ -40,8 +40,8 @@ private static boolean isExpandedName(String name) {\n     @Override @CheckForNull\n     public String getJcrName(String oakName) {\n         checkNotNull(oakName);\n-        checkArgument(!oakName.startsWith(\":\")); // hidden name\n-        checkArgument(isExpandedName(oakName));  // expanded name\n+        checkArgument(!oakName.startsWith(\":\"), oakName); // hidden name\n+        checkArgument(!isExpandedName(oakName), oakName); // expanded name\n \n         if (hasSessionLocalMappings()) {\n             int colon = oakName.indexOf(':');\n", 
  "project": "jackrabbit-oak", 
  "linesAdd": 2, 
  "jira_id": "509", 
  "nb_skipped": 1, 
  "commit": "b896c926", 
  "nb_failure": 0, 
  "linesRem": 2
}